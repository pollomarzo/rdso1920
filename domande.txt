1) Perché una system call non può essere implementata come una normale chiamata di funzione ad un indirizzo del kernel?
- richiede un mode switch
- syscall devono essere atomiche -> interrupt disabilitati

2) Dato un sistema monoprocessore che elabora dati in modo batch, cosa cambia se si usa uno scheduler round-robin al posto di uno FIFO?
premessa: batch processing significa tanti dati su cui faccio la stessa operazione cretina AKA scheda grafica. punto principale: no input utente
- diminuisce le prestazioni: poiché è preemptive, il tempo di paginazione aumenta e il tempo speso in context switch è buttato
(- allo stesso tempo, se potessi avere risultati intermedi, questi sarebbero persi con un FIFO: se l'obiettivo non fosse completare tutto in meno tempo possibile ma proseguire uniformemente completando tutte le operazioni, round robin ha meno senso.)


3) in quali casi anche utilizzando file system con supporto di journaling si possono perdere informazioni?
- errori dell'utente
- corruzione del journal
- crash prima dell'eliminazione (?)
- corruzione filesystem (mi piove dentro, tempesta solare, cago nell'ssd, mi cade il pc). un controllo di coerenza NON È un backup

4) In quali casi è bene non usare la memoria virtuale?


5) Come si calcola la lunghezza massima di un file che si può memorizzare su un file system di tipo fat? / Come si calcola la lunghezza massima di un file che si può memorizzare su un file system di tipo ext2?


6) la ricostruzione della coerenza mediante tecnica di journaling risolve solo alcuni tipi di incoerenze, quali non vengono gestite?


